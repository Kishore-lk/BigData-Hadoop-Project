import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class MRJoin {
 public static class CustomerMapper extends Mapper < Object, Text, Text, Text > {
  public void map(Object key, Text value, Context context)
  throws IOException,
  InterruptedException {
   String record = value.toString(); //Read each record
   String[] parts = record.split(","); // Parse CSV file 
   context.write(new Text(parts[0]), new Text("CUST   " + parts[1])); //Label Customers
  }
 }

 public static class TransactionMapper extends Mapper < Object, Text, Text, Text > {
  public void map(Object key, Text value, Context context)
  throws IOException,
  InterruptedException {
   String record = value.toString(); // Read each record
   String[] parts = record.split(","); // Parse CSV File
   context.write(new Text(parts[2]), new Text("TRAN   " + parts[3])); // Label Transactions
  }
 }

 public static class ReduceJoinReducer extends Reducer < Text, Text, Text, Text > {
  public void reduce(Text key, Iterable < Text > values, Context context)
  throws IOException,
  InterruptedException {
   String name = "";
   double total = 0.0;
   int count = 0;
   /* Here is where the logic of the JOIN / reduction is laid out
      In this case  this sections counts the number of customers
      and the number of tranasactions per customer alomg with their value */
   for (Text t: values) {
    String parts[] = t.toString().split("  ");
    if (parts[0].equals("TRAN")) {
     count++; // count the number of transactions
     total += Float.parseFloat(parts[1]); // add up their total
    } else if (parts[0].equals("CUST")) {
     name = parts[1]; // count the number of customers
    }
   }
   String str = String.format("%d %.2f", count, total);
   context.write(new Text(name), new Text(str));
  }
 }

 public static void main(String[] args) throws Exception {
  Configuration conf = new Configuration();
  Job job = new Job(conf, "Reduce-side-Join");
  job.setJarByClass(MRJoin.class);
  job.setReducerClass(ReduceJoinReducer.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  MultipleInputs.addInputPath(job, new Path(args[0]), TextInputFormat.class, CustomerMapper.class);
  MultipleInputs.addInputPath(job, new Path(args[1]), TextInputFormat.class, TransactionMapper.class);
  Path outputPath = new Path(args[2]);
  FileOutputFormat.setOutputPath(job, outputPath);
  outputPath.getFileSystem(conf).delete(outputPath);
  System.exit(job.waitForCompletion(true) ? 0 : 1);
 }
}
